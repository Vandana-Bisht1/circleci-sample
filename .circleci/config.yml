# This config was automatically generated from your source code
# Stacks detected: deps:node:.
version: 2.1
orbs:
  node: circleci/node@5
jobs:
  test-node:
    # Install node dependencies and run tests
    executor: node/default
    parallelism: 2
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Test application
          command: |
            TEST=$(circleci tests glob "src/__tests__/*.tsx")
            echo "$TEST" | circleci tests run --command="xargs yarn test" --split-by=timings
      # - run:
      #     name: Split tests and output to file
      #     command: |
      #       circleci tests glob "src/**/*.test.*" | circleci tests split --split-by=timings > split_tests.txt
      #       echo "Running the following tests:"
      #       cat split_tests.txt
      # - run:
      #     name: Run tests with JUnit as reporter
      #     command: npm test -- --ci --reporters=default --reporters=jest-junit --outputFile=test-results/junit.xml
          environment:
            JEST_JUNIT_OUTPUT_DIR: test-results
            # JEST_JUNIT_OUTPUT_NAME: junit.xml
            # JEST_JUNIT_ANCESTOR_SEPARATOR: ' â€º '
            # JEST_JUNIT_CLASSNAME_TEMPLATE: '{filepath}-{title}'
            # JEST_JUNIT_TITLE_TEMPLATE: '{title}'
            JEST_JUNIT_ADD_FILE_ATTRIBUTE: "true"
      - store_test_results:
          path: test-results
  build-node:
    # Build node project
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      # Copy output to artifacts dir
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build
  deploy:
    # This is an example deploy job, not actually used by the workflow
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: "#e.g. ./deploy.sh"
  say_hello:
    macos:
      xcode: 13.4.1
    steps:
      - run: echo "Say hello to YAML!"
  say_howareyou:
    macos:
      xcode: 13.4.1
    steps:
      - run: echo "Say how are you to YAML!"
  say_goodbye:
    macos:
      xcode: 13.4.1
    steps:
      - run: echo "Say goodbye to YAML!"
workflows:
  build-and-test:
    jobs:
      - test-node
      - build-node:
          requires:
            - test-node
    # - deploy:
    #     requires:
    #       - build-node
  my-workflow:
    jobs:
      - say_hello
      - say_howareyou:
          requires:
            - say_hello
      - say_goodbye